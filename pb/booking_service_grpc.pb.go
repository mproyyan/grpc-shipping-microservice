// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: booking_service.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Booking_BookNewCargo_FullMethodName       = "/pb.Booking/BookNewCargo"
	Booking_LoadCargo_FullMethodName          = "/pb.Booking/LoadCargo"
	Booking_AssignCargoToRoute_FullMethodName = "/pb.Booking/AssignCargoToRoute"
	Booking_ChangeDestination_FullMethodName  = "/pb.Booking/ChangeDestination"
	Booking_Cargos_FullMethodName             = "/pb.Booking/Cargos"
)

// BookingClient is the client API for Booking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingClient interface {
	BookNewCargo(ctx context.Context, in *BookNewCargoRequest, opts ...grpc.CallOption) (*BookNewCargoResponse, error)
	LoadCargo(ctx context.Context, in *LoadCargoRequest, opts ...grpc.CallOption) (*LoadCargoResponse, error)
	AssignCargoToRoute(ctx context.Context, in *AssignCargoToRouteRequest, opts ...grpc.CallOption) (*AssignCargoToRouteResponse, error)
	ChangeDestination(ctx context.Context, in *ChangeDestinationRequest, opts ...grpc.CallOption) (*ChangeDestinationResponse, error)
	Cargos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CargosResponse, error)
}

type bookingClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingClient(cc grpc.ClientConnInterface) BookingClient {
	return &bookingClient{cc}
}

func (c *bookingClient) BookNewCargo(ctx context.Context, in *BookNewCargoRequest, opts ...grpc.CallOption) (*BookNewCargoResponse, error) {
	out := new(BookNewCargoResponse)
	err := c.cc.Invoke(ctx, Booking_BookNewCargo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) LoadCargo(ctx context.Context, in *LoadCargoRequest, opts ...grpc.CallOption) (*LoadCargoResponse, error) {
	out := new(LoadCargoResponse)
	err := c.cc.Invoke(ctx, Booking_LoadCargo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) AssignCargoToRoute(ctx context.Context, in *AssignCargoToRouteRequest, opts ...grpc.CallOption) (*AssignCargoToRouteResponse, error) {
	out := new(AssignCargoToRouteResponse)
	err := c.cc.Invoke(ctx, Booking_AssignCargoToRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) ChangeDestination(ctx context.Context, in *ChangeDestinationRequest, opts ...grpc.CallOption) (*ChangeDestinationResponse, error) {
	out := new(ChangeDestinationResponse)
	err := c.cc.Invoke(ctx, Booking_ChangeDestination_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) Cargos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CargosResponse, error) {
	out := new(CargosResponse)
	err := c.cc.Invoke(ctx, Booking_Cargos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServer is the server API for Booking service.
// All implementations must embed UnimplementedBookingServer
// for forward compatibility
type BookingServer interface {
	BookNewCargo(context.Context, *BookNewCargoRequest) (*BookNewCargoResponse, error)
	LoadCargo(context.Context, *LoadCargoRequest) (*LoadCargoResponse, error)
	AssignCargoToRoute(context.Context, *AssignCargoToRouteRequest) (*AssignCargoToRouteResponse, error)
	ChangeDestination(context.Context, *ChangeDestinationRequest) (*ChangeDestinationResponse, error)
	Cargos(context.Context, *empty.Empty) (*CargosResponse, error)
	mustEmbedUnimplementedBookingServer()
}

// UnimplementedBookingServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServer struct {
}

func (UnimplementedBookingServer) BookNewCargo(context.Context, *BookNewCargoRequest) (*BookNewCargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookNewCargo not implemented")
}
func (UnimplementedBookingServer) LoadCargo(context.Context, *LoadCargoRequest) (*LoadCargoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCargo not implemented")
}
func (UnimplementedBookingServer) AssignCargoToRoute(context.Context, *AssignCargoToRouteRequest) (*AssignCargoToRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCargoToRoute not implemented")
}
func (UnimplementedBookingServer) ChangeDestination(context.Context, *ChangeDestinationRequest) (*ChangeDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDestination not implemented")
}
func (UnimplementedBookingServer) Cargos(context.Context, *empty.Empty) (*CargosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cargos not implemented")
}
func (UnimplementedBookingServer) mustEmbedUnimplementedBookingServer() {}

// UnsafeBookingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServer will
// result in compilation errors.
type UnsafeBookingServer interface {
	mustEmbedUnimplementedBookingServer()
}

func RegisterBookingServer(s grpc.ServiceRegistrar, srv BookingServer) {
	s.RegisterService(&Booking_ServiceDesc, srv)
}

func _Booking_BookNewCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookNewCargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).BookNewCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Booking_BookNewCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).BookNewCargo(ctx, req.(*BookNewCargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_LoadCargo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCargoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).LoadCargo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Booking_LoadCargo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).LoadCargo(ctx, req.(*LoadCargoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_AssignCargoToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCargoToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).AssignCargoToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Booking_AssignCargoToRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).AssignCargoToRoute(ctx, req.(*AssignCargoToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_ChangeDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).ChangeDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Booking_ChangeDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).ChangeDestination(ctx, req.(*ChangeDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_Cargos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).Cargos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Booking_Cargos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).Cargos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Booking_ServiceDesc is the grpc.ServiceDesc for Booking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Booking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Booking",
	HandlerType: (*BookingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookNewCargo",
			Handler:    _Booking_BookNewCargo_Handler,
		},
		{
			MethodName: "LoadCargo",
			Handler:    _Booking_LoadCargo_Handler,
		},
		{
			MethodName: "AssignCargoToRoute",
			Handler:    _Booking_AssignCargoToRoute_Handler,
		},
		{
			MethodName: "ChangeDestination",
			Handler:    _Booking_ChangeDestination_Handler,
		},
		{
			MethodName: "Cargos",
			Handler:    _Booking_Cargos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service.proto",
}
